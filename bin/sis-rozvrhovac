#!/usr/bin/ruby -w

require 'isko'
require 'isko/agent'
require 'isko/prolog-gen'
require 'isko/timetable-reporter'
require 'haml'

require 'fileutils'
FileUtils.mkdir_p('outputs')

# TODO: chci umelou inteligenci 2
# TODO: napsat si ten pseudopredmet na prirodovedecke fakulte :)

VOLITELNE = { # Zajimave predmety
	NPRG024: 0, # navrhove vzory - Zavoral

	# katedra algebry
	NALG042: 0, # cviceni z algebry
	NMAG536: 0, # dukazova slozitost a P vs. NP problem
	NMMB204: 0, # pocitacova algebra

	# KDSS
	NSWI133: 0, # firemni seminare

	# KPMS
	NMFM260: 0, # ekonomie
	NMFM104: 0, # uvod do financi

	# KSI
	NSWI109: 1, # konstrukce prekladacu
	NPRG042: 1, # programovani v paralelnim prostredi

	# KTIML
	NAIL106: 0, # multiagentni systemy
}
POVINNE_VOLITELNE_MGR = { # Predmety, co jsou volitelne na magistru
	# KAM & KTIML
	NTIN017: 0, # paralelni algoritmy

	# KTIML
	NAIL013: 0, # aplikace teorie neuronovych siti
	NAIL029: 3, # strojove uceni, 3 kr
	NAIL065: 0, # evolucni robotika
	NAIL068: 0, # umele bytosti
	NAIL070: 10, # umela inteligence 2
	NDBI023: 0, # dobyvani znalosti -- zrejme to ma mraz a mrazova
	NSWE001: 0, # vestavene systemy a systemy realneho casu
}
POVINNE_VOLITELNE = {
	NOPT046: -2, # zaklady spojite optimalizace
	NMAI042: -1, # numericka matematika
	NAIL063: 0, # temno
	NPRG051: 1, # pokrocile C++
	NPRG038: 1, # pokrocily .NET
	NSWI143: 0, # architektura pocitacu
	NPGR004: -2, # pocitacova grafika 2
	NPRG036: 0, # technologie XML
	NSWI045: -1, # rodina protokolu TCP/IP

# nechci
#	NPRG003: -2 # metodika programovani a filosofie programovacich jazyku
}
POVINNE = {
	NDBI025: 0,	# databazove systemy
	NOPT048: 0,	# optimalizacni metody
}

VSECHNY = VOLITELNE.merge(POVINNE_VOLITELNE_MGR.merge(POVINNE_VOLITELNE.merge(POVINNE)))

@agent = Isko::Agent.new

def make_generator(prolog_path = nil)
	prolog_path ||= './code.prolog'
	gen = PrologGen.new(prolog_path, @agent)
	gen.add_subjects(VSECHNY.keys)
	VSECHNY.each do |s, val|
		gen.want_subjects([s], val) unless val == 0
	end

	gen.require_subjects(POVINNE.keys) # Musim mit povinne predmety.
	gen
end

def build_min_hours
	gen = make_sane_generator
	gen.want_to_do_nothing(3)
	gen.want_free_days(30)

	puts "Solving (min-hours)."
	result = gen.finish_and_execute

	if result[:slots].empty?
		puts "Probably failed :("
		return nil
	end

	result
end

def build_max_credits
	gen = make_sane_generator
	gen.want_subjects_by_credits(VSECHNY.keys)

	puts "Solving (max-credit)."
	result = gen.finish_and_execute

	if result[:slots].empty?
		puts "Probably failed :("
		return nil
	end

	result
end

def make_sane_generator
	gen = make_generator
	gen.require_credits(8, POVINNE_VOLITELNE.keys) # zbyva mi 8 povinne volitelnych kreditu
	gen
end

def build_mine
	# TODO: tempfile
	puts "building the timetable"

	gen = make_sane_generator
	gen.want_free_days(1000) # Ohodnot kazdy volny den.

	gen.require_credits(8, POVINNE_VOLITELNE.keys)
	gen.require_credits(24, VSECHNY.keys)

	gen.want_to_do_nothing(5) # Odeber za kazdy slot.

	# Odeber dalsi body za sloty v tehle casech.
	gen.dont_want_insane_hours(-> hour { hour < 9 * 60 || hour > 17 * 60 }, 1)

	puts "Solving."
	result = gen.finish_and_execute

	if result[:slots].empty?
		puts "Probably failed :("
		return nil
	end

	result
end

#report_results(build_max_credits, "outputs/output_max_credits.html")
Isko::TimetableReporter.report_results(@agent, build_mine, "outputs/output.html")
#report_results(build_min_hours, "outputs/output_min_hours.html")
